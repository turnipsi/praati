#!/usr/bin/perl -T
# -*- mode: perl; coding: utf-8; -*'
# $Id: praati,v 1.6 2014/02/23 19:53:32 je Exp $

=pod

A sample Apache configuration:

  PerlModule Apache::PerlRun
  PerlTaintCheck On

  # XXX why does not Files or Location work?
  <Directory /users/*/praati>
    SetHandler perl-script
    PerlHandler Apache::PerlRun
    Options +ExecCGI
    PerlSendHeader On
    PerlModule autodie       \
               diagnostics   \
               CGI           \
               Class::Struct \
               Data::Dumper  \
               DBD::SQLite   \
               DBI           \
               Email::Valid  \
               POSIX
    PerlSetVar PerlRunOnce On
  </Directory>

=cut

use autodie;
use diagnostics;
use strict;
use utf8;
use warnings FATAL => qw(all);


#
# language extensions
#

package Praati {
  use Data::Dumper;
  use Exporter qw(import);

  our @EXPORT = qw(d);

  sub d { Dumper(@_); }
}


#
# configurations
#

package Praati::Config {
  Praati->import;

  our $WWW_DIR = '/'; # XXX in OpenBSD Apache chroot only...

  our $DB_DIR       = 'db';
  our $DB_FILE_PATH = "${WWW_DIR}/${DB_DIR}/praati.sqlite3";

  our $MUSIC_PATH = "${DB_DIR}/music";
}


#
# model
#

package Praati::Model {
  Praati->import;

  use DBI;
  use Email::Valid;

  our $DB;

  sub init {
    my %attrs = (
      AutoCommit                       => 1,
      PrintError                       => 0,
      RaiseError                       => 1,
      sqlite_allow_multiple_statements => 1,
    );
    $DB = DBI->connect("dbi:SQLite:dbname=${Praati::Config::DB_FILE_PATH}",
		       '',
		       '',
		       \%attrs);

    $DB->do('PRAGMA foreign_keys = ON');

    Praati::Model::SQLite::register_sqlite_functions();

    create_db_tables();
  }

  sub close {
    if ($DB) { $DB->disconnect; }
  }

  sub create_db_tables {
    query(q{
      create table if not exists users (
        user_id                 integer      primary key not null,
        user_email              varchar(256) unique      not null
                                check(check_user_email(user_email)),
        user_encrypted_password varchar(256)             not null,
        user_name               varchar(256) unique      not null,
        user_role               varchar(256)             not null
                                check(user_role in ('admin', 'critic'))
      );
    });
  }

  sub check_user_email {
    my ($email_address) = @_;
    Email::Valid->address($email_address) ? 1 : 0;
  }

  sub query { $DB->do($_[0]); }
}

package Praati::Model::SQLite {
  Praati->import;

  sub register { $Praati::Model::DB->sqlite_create_function(@_); }

  sub register_sqlite_functions {
    register(check_user_email => 1, \&Praati::Model::check_user_email);
  }
}


#
# view
#

package Praati::View {
  Praati->import;

}


#
# controller
#

package Praati::Controller {
  Praati->import;

  use CGI;

  our $Q;

  sub main {
    $Q = CGI->new;

    eval {
      Praati::Model::init();

      my $response = url_dispatch( $Q->path_info );

      $response->print($Q);
    };
    my $error = $@;

    Praati::Model::close();

    if ($error) {
      die $error;
    }
  }

  sub redirect {
    my ($path) = @_;
    response(redirect_uri => ($Q->url . $path),
             status       => 301);
  }

  sub response { Praati::Controller::Response->new(@_); }

  sub url_dispatch {
    my ($path_info) = @_;

    local $_ = $path_info;

    (
      m|^$|          ? redirect('/new_user') :
      m|^/$|         ? redirect('/new_user') :
      m|^/new_user$| ? page_new_user()       :

        no_such_page()
    );
  }

  # pages

  sub no_such_page {
    response(page   => 'No such page.',
             status => 404);
  }

  sub page_new_user {
    response(page => 'Create new user.');
  }
}

package Praati::Controller::Response {
  Praati->import;

  use Class::Struct __PACKAGE__, {
    page         => '$',
    redirect_uri => '$',
    status       => '$',
  };

  sub print {
    my ($self, $q) = @_;

    my $content
      = defined($self->redirect_uri)
          ? $q->redirect(-status => $self->status,
                         -uri    => $self->redirect_uri)
          :
        defined($self->page)
          ? $self->page_with_header($q)
          : undef;

    die 'Not a sensible response object' unless defined $content;

    print $content;
  }

  sub page_with_header {
    my ($self, $q) = @_;

    my @header_args = defined($self->status)
                        ? (-status => $self->status)
                        : ();

    $q->header(@header_args)
    . $self->page;
  }
}


package main {
  Praati::Controller::main();
}
