#!/usr/bin/perl -T
# -*- mode: perl; coding: utf-8; -*-
# $Id: test,v 1.9 2014/04/03 19:05:10 je Exp $

use autodie;
# use diagnostics;
use strict;
use utf8;
use warnings FATAL => qw(all);

use HTML::SimpleParse;
use HTML::TableContentParser;
use Test::More tests => 5;
use Test::WWW::Mechanize;


package Praati::User {
  use Class::Struct __PACKAGE__, {
    browser  => 'Test::WWW::Mechanize',
    email    => '$',
    name     => '$',
    password => '$',
    site     => '$',
  };

  use Test::More;

  sub new_user {
    my ($class, $site, $email, $name, $password) = @_;

    my $self = $class->new(browser  => Test::WWW::Mechanize->new(autolint => 1),
                           email    => $email,
                           name     => $name,
                           password => $password,
                           site     => $site);

    $self and $self->register();

    $self;
  }

  sub login {
    my ($self, $user_type) = @_;

    my $user_name = $self->name;

    subtest(qq{Login user "$user_name"} => sub {
      plan(tests => 4);

      $self->main_page_ok()
        and $self->browser->follow_link_ok({ text => 'Login' })
        or return;

      my $formfields = {
                         user_email    => $self->email,
                         user_password => $self->password,
                       };

      $self->browser->submit_form_ok({
                                       button      => 'submit_login',
                                       with_fields => $formfields,
                                     },
                                     'Send login form')
        and $self->browser->base_like(qr{main$});

      # XXX should check user type here (that it matches $user_type)
    });
  }

  sub lookup_rating_ids {
    my ($self) = @_;

    my %rating_ids;

    my $tcp   = HTML::TableContentParser->new();
    my $table = $tcp->parse( $self->browser->content() );

    if ($table && $table->[1] && $table->[1]{rows}) {
      foreach my $row (@{ $table->[1]{rows} }) {
        my $cells = $row->{cells};

        next unless $cells && $cells->[1] && $cells->[1]{data};
        my $songname = $cells->[1]{data};

        next unless $cells->[2] && $cells->[2]{data};

        # XXX put html parsing into some subroutine?
        my $p = HTML::SimpleParse->new($cells->[2]{data}, fix_case => 0);
        foreach ($p->tree) {
          if ($_->{type} eq 'starttag') {
            my %args = $p->parse_args($_->{content});
            if ($args{name} && $args{name} =~ /^songs\[(\d+)\].rating_value$/) {
              $rating_ids{ $songname } = $1;
              last;
            }
          }
        }
      }
    }

    \%rating_ids;
  }

  sub main_page_ok {
    my ($self) = @_;
    $self->browser->get_ok($self->site);
  }

  sub rate_songs {
    my ($self, $panel_name, $song_ratings) = @_;

    my $user_name = $self->name;

    my $title = qq{"$user_name" rates songs in "$panel_name"};

    my $song_ratings_count = scalar(keys %$song_ratings);

    subtest($title => sub {
      plan(tests => (4 + $song_ratings_count));

      $self->main_page_ok()
        and $self->browser->follow_link_ok({ text => 'Panels' })
        and $self->browser->follow_link_ok({ text => $panel_name })
        or return;

      $self->browser->form_number(1);

      my $rating_ids = $self->lookup_rating_ids();

      while (my ($song_name, $rating_value) = each %$song_ratings) {
        my $rating_id = $rating_ids->{ $song_name };
        ok(defined($rating_id), "Found rating id for song '$song_name'");

        $self->browser->select("songs[$rating_id].rating_value",
                               $rating_value);
      }

      $self->browser->submit_form_ok({ button => 'send_ratings', },
                                     'Send ratings');
    });
  }

  sub register {
    my ($self) = @_;

    my $user_name = $self->name;

    subtest(qq{Make a new user "$user_name"} => sub {
      plan(tests => 5);

      $self->main_page_ok()
        and $self->browser->content_contains('The main page.')
        and $self->browser->follow_link_ok({ text => 'New user' })
        or return;

      my $formfields = {
                         user_email          => $self->email,
                         user_name           => $self->name,
                         user_password       => $self->password,
                         user_password_again => $self->password,
                       };

      $self->browser->submit_form_ok({
                                       button      => 'submit_new_user',
                                       with_fields => $formfields,
                                     },
                                     'Send new user form')
        and $self->browser->base_like(qr{login$});
    });
  }
}


#
# main
#

my $site = 'http://localhost/~je/praati/praati';

my $admin1 = Praati::User->new_user($site,
                                    'admin1@example.org',
                                    'Admin One',
                                    'pogjwviwjvalaook');

my $critic1 = Praati::User->new_user($site,
                                    'critic1@example.org',
                                    'Critic One',
                                    'jtreofnvwlcjiwe');

my $critic2 = Praati::User->new_user($site,
                                    'critic2@example.org',
                                    'Critic Two',
                                    'ofwqhowqjbnmqwo');

$critic1
  and $critic1->login('critic')
  and $critic1->rate_songs('Depeche Mode - Best of Greatest Hits',
                           {
                             "Personal Jesus"                    => '8.0',
                             "Just Can't Get Enough"             => '1.5',
                             "Everything Counts"                 => '7.5',
                             "Enjoy The Silence"                 => '5.5',
                             "Shake The Disease"                 => '3.5',
                             "See You"                           => '1.0',
                             "It's No Good"                      => '5.0',
                             "Strangelove"                       => '6.0',
                             "Suffer Well"                       => '7.0',
                             "Dream On"                          => '5.5',
                             "People Are People"                 => '4.0',
                             "Martyr"                            => '8.0',
                             "Walking In My Shoes"               => '9.0',
                             "I Feel You"                        => '9.0',
                             "Precious"                          => '3.5',
                             "Master And Servant"                => '2.5',
                             "New Life"                          => '2.0',
                             "Never Let Me Down Again"           => '7.5',
                             "Wrong"                             => '6.0',
                             "Peace"                             => '5.5',
                             "Personal Jesus (The Stargate Mix)" => '3.5',
                             "Heaven"                            => '3.5',
                             "Soothe My Soul"                    => '4.0',
                           });
