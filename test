#!/usr/bin/perl -T
# -*- mode: perl; coding: utf-8; -*-
#
# Copyright (c) 2014, 2017 Juha Erkkil√§ <je@turnipsi.no-ip.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use autodie;
# use diagnostics;
use feature qw(unicode_strings);
use strict;
use utf8;
use warnings FATAL => qw(all);

use CGI;
use HTML::SimpleParse;
use HTML::TableContentParser;
use Test::More tests => 47;
use Test::WWW::Mechanize;

use lib '.';
use Praati::View::L10N;

# XXX this should be initialized differently for every user
# XXX (with different languages preferences)
Praati::View::L10N::init_praati_l10n();

package Praati::User {
  use Class::Struct __PACKAGE__, {
    browser  => 'Test::WWW::Mechanize',
    email    => '$',
    name     => '$',
    password => '$',
    site     => '$',
  };
  use Praati::View::L10N qw(t);

  use Test::Deep;
  use Test::More;

  Praati::View::L10N->import;

  sub check_listening_session_rating_counts {
    my ($self, $rating_counts) = @_;

    my $tcp    = HTML::TableContentParser->new();
    my $tables = $tcp->parse( $self->browser->content() );

    my $test_title = 'Rating counts for all users are correct';
    if ($tables && $tables->[1] && $tables->[1]{rows}) {
      my @rows = map {
                   my $row = $_;
                   $row->{cells}
                     ? [map { $_->{data} // () } @{ $row->{cells} }]
                     : ();
                 } @{ $tables->[1]{rows} };

      cmp_deeply(\@rows, $rating_counts, $test_title);
    } else {
      ok(0, $test_title);
    }
  }

  sub create_new_listening_session {
    my ($self, $panel_name, $ls_name, $ls_type, $song_position) = @_;

    if ($ls_type eq 'desc_asc') {
      confess('Argument error') if ! defined $song_position;
    } elsif ($ls_type eq 'asc') {
      confess('Argument error') if defined $song_position;
    } else {
      confess('Argument error');
    }

    my $test_title
      = sprintf('Create a new listening session "%s" (of type %s)',
                $ls_name,
                $ls_type);

    subtest($test_title, sub {
      plan(tests => 4);

      $self->go_to_new_listening_session_page($panel_name);

      my $formfields = {
        listening_session_name => $ls_name,
        listening_session_type => $ls_type,
      };

      $self->browser->submit_form_ok({ button      => 'new_listening_session',
                                       with_fields => $formfields },
                                     'Sent new listening session request');

      $self->browser->base_like(
        qr{listening_sessions/overview\?listening_session_id=\d+$});
      $self->browser->text_contains(
        t('Listening session overview for "[_1]".', $ls_name));
    });
  }

  sub find_listening_session_create_link {
    my ($html, $panel_name) = @_;

    my $link;

    my ($p, @nodes) = get_parser_and_nodes($html);
    for (my $i = 0; $i < $#nodes; $i++) {
      my $n = $nodes[$i];
      if ($n->{type} eq 'text' && $n->{content} =~ /\Q$panel_name\E/) {
        my $ls_node = $nodes[$i + 5];
        if ($ls_node && $ls_node->{type} eq 'starttag') {
          my %args = $p->parse_args( $ls_node->{content} );
          $link = $args{href};
          last;
        }
      }
    }

    $link;
  }

  sub get_parser_and_nodes {
    my ($html) = @_;
    my $p = HTML::SimpleParse->new($html, fix_case => 0);
    ($p, $p->tree);
  }

  sub go_to_new_listening_session_page {
    my ($self, $panel_name) = @_;
    subtest(qq{Go to new listening session page for "$panel_name"}, sub {
      plan(tests => 4);

      $self->main_page_ok()
        and $self->browser->follow_link_ok({ text => t('Panels') })
        or return;

      my $ls_create_link
        = find_listening_session_create_link($self->browser->content(),
                                             $panel_name);

      return unless $ls_create_link;

      $self->browser->follow_link_ok({ url => $ls_create_link });
      $self->browser->text_contains(
        t('Create a new listening session for panel "[_1]":', $panel_name));
    });
  }

  sub login {
    my ($self, $user_type) = @_;

    my $user_name = $self->name;

    subtest(qq{Login user "$user_name"} => sub {
      plan(tests => 5);

      $self->main_page_ok()
        and $self->browser->follow_link_ok({ text => t('Login') })
        or return;

      my $formfields = {
                         user_email    => $self->email,
                         user_password => $self->password,
                       };

      $self->browser->submit_form_ok({ button      => 'submit_login',
                                       with_fields => $formfields, },
                                     'Send login form')
        and $self->browser->base_like(qr{main$})
        and $self->browser->text_contains(
              t('Logged in as "[_1]" ([_2])', $user_name, $user_type));
    });
  }

  sub logout {
    my ($self) = @_;
    my $user_name = $self->name;

    subtest(qq{Login user "$user_name"} => sub {
      plan(tests => 5);

      $self->main_page_ok()
        and $self->browser->follow_link_ok({ text => t('Logout') })
        and $self->browser->text_contains( t('You are now logged out.') )
        and ($self->browser->get($self->site . '/panels')
               and ok($self->browser->status() == 403,
                      'Returned status code 403 for an unauthorized page'))
        and $self->browser->text_contains( t('Access unauthorized.') );
    });
  }

  sub lookup_rating_ids {
    my ($self) = @_;

    my %rating_ids;

    my $tcp    = HTML::TableContentParser->new();
    my $tables = $tcp->parse( $self->browser->content() );
    return unless ref($tables) eq 'ARRAY';

    foreach my $tablerow (@$tables) {
      next unless ref($tablerow->{rows}) eq 'ARRAY';

      foreach my $row (@{ $tablerow->{rows} }) {
        my $cells = $row->{cells};

	next unless ref($cells) eq 'ARRAY'
		      && ref($cells->[0]) eq 'HASH'
		      && $cells->[0]{data}
		      && ref($cells->[2]) eq 'HASH'
		      && $cells->[2]{data};

	my $songname;
	my (undef, @songname_nodes) = get_parser_and_nodes($cells->[0]{data});
	foreach (@songname_nodes) {
	  next unless $_->{type} eq 'text';
	  $songname = $_->{content};
	}
	next unless $songname;

	my ($p, @nodes) = get_parser_and_nodes($cells->[2]{data});
	foreach (@nodes) {
	  next unless $_->{type} eq 'starttag';
	  my %args = $p->parse_args( $_->{content} );
	  next unless
	    $args{name} && $args{name} =~ /^songs\[(\d+)\].rating_value$/;
	  $rating_ids{ $songname } = $1;
	  last;
	}
      }
    }

    \%rating_ids;
  }

  sub main_page_ok {
    my ($self) = @_;
    $self->browser->get_ok($self->site);
  }

  sub ask_first_panel_name {
    my ($self) = @_;
    $self->browser->follow_link_ok({ text => t('Panels') })
      and $self->browser->follow_link_ok({ text => t('rate') })
        or return;

    my $regex = t('This panel is "[_1]".', 'PANEL_NAME');
    $regex = qr{\Q$regex\E};
    $regex =~ s/PANEL_NAME/\(\.\*\?\)/;

    $self->browser->content() =~ $regex
      or return;
    $1;
  }

  sub new_user {
    my ($class, $site, $email, $name, $password) = @_;

    # XXX autolint not working for me (with latin1-characters (or utf8))
    my $self = $class->new(browser  => Test::WWW::Mechanize->new(autolint => 0),
                           email    => $email,
                           name     => $name,
                           password => $password,
                           site     => $site);

    $self and $self->register();

    $self;
  }

  sub rate_songs {
    my ($self, $panel_name, $rating_fn) = @_;

    my $user_name = $self->name;

    my $title = qq{"$user_name" rates songs in "$panel_name"};

    # XXX testcount should not depend on this
    # my $song_ratings_count = 0;

    subtest($title => sub {
      plan(tests => 5);

      $self->main_page_ok()
        and $self->browser->follow_link_ok({ text => t('Panels') })
        and $self->browser->follow_link_ok({ text => $panel_name })
        or return;

      $self->browser->form_number(1);

      my $rating_ids = $self->lookup_rating_ids();

      my @songs_ordered_by_song_id =
        sort { $rating_ids->{$a} <=> $rating_ids->{$b} }
          keys %$rating_ids;

      foreach my $songname (@songs_ordered_by_song_id) {
        my $song_id = $rating_ids->{ CGI::escapeHTML($songname) };
        my $rating_value = $rating_fn->($song_id, $songname);

	$self->browser->select("songs[$song_id].rating_value", $rating_value);
      }

      $self->browser->submit_form_ok({ button => 'send_ratings', },
                                     'Send ratings');
    });
  }

  sub register {
    my ($self) = @_;

    my $user_name = $self->name;

    subtest(qq{Make a new user "$user_name"} => sub {
      plan(tests => 5);

      $self->main_page_ok()
        and $self->browser->text_contains( t('The main page.') )
        and $self->browser->follow_link_ok({ text => t('New user') })
        or return;

      my $formfields = {
                         user_email          => $self->email,
                         user_name           => $self->name,
                         user_password       => $self->password,
                         user_password_again => $self->password,
                       };

      $self->browser->submit_form_ok({ button      => 'submit_new_user',
                                       with_fields => $formfields, },
                                     'Send new user form')
        and $self->browser->base_like(qr{login$});
    });
  }
}


#
# main
#

die 'Usage: test site' unless $ARGV[0];

my $site       = $ARGV[0];


# The admin user must be created first.

my $admin1 = Praati::User->new_user($site,
                                    'admin1@example.org',
                                    'Admin One',
                                    'pogjwviwjvalaook');

my $panel_name;
do {
  $admin1
    and $admin1->login('admin')
    and $panel_name = $admin1->ask_first_panel_name();
} or die 'Could not get panel name';

$admin1->logout();

# critic One

my $critic1 = Praati::User->new_user($site,
                                    'critic1@example.org',
                                    'One',
                                    'jtreofnvwlcjiwe');

package Praati::User::RatingStyles {
  sub do_not_rate { '-';   }
  sub rate_some   { '5.0'; }
}

sub Praati:: {}

$critic1
  and $critic1->login('critic')
  and $critic1->rate_songs($panel_name,
			   \&Praati::User::RatingStyles::do_not_rate)
  and $critic1->logout();


# critic Two

my $critic2 = Praati::User->new_user($site,
                                    'critic2@example.org',
                                    'Two',
                                    'ofwqhowqjbnmqwo');

$critic2
  and $critic2->login('critic')
  and $critic2->rate_songs($panel_name,
			   \&Praati::User::RatingStyles::do_not_rate)
  and $critic2->logout();


# critics Three and Four have exactly the same mind:

my %ratings_for_critics_three_and_four = (
  q{Personal Jesus}                    =>  '7.5',
  q{Just Can't Get Enough}             =>  '4.0',
  q{Everything Counts}                 =>  '3.0',
  q{Enjoy The Silence}                 =>  '6.0',
  q{Shake The Disease}                 =>  '9.5',
  q{See You}                           =>  '1.0',
  q{It's No Good}                      =>  '9.0',
  q{Strangelove}                       =>  '7.0',
  q{Suffer Well}                       =>  '8.5',
  q{Dream On}                          =>  '8.0',
  q{People Are People}                 =>  '5.5',
  q{Martyr}                            =>  '7.0',
  q{Walking In My Shoes}               =>  '3.5',
  q{I Feel You}                        => '10.0',
  q{Precious}                          =>  '5.0',
  q{Master And Servant}                =>  '4.0',
  q{New Life}                          =>  '8.5',
  q{Never Let Me Down Again}           =>  '5.0',
  q{Wrong}                             =>  '2.5',
  q{Peace}                             =>  '0.0',
  q{Personal Jesus (The Stargate Mix)} =>  '4.5',
  q{Heaven}                            =>  '5.0',
  q{Soothe My Soul}                    =>  '8.5',
);

my $critic3 = Praati::User->new_user($site,
                                    'critic3@example.org',
                                    'Three',
                                    'aorlnwwjpwiaqnl');

my $critic4 = Praati::User->new_user($site,
                                    'critic4@example.org',
                                    'Four',
                                    'rtrejptspaeiewm');

$critic3
  and $critic3->login('critic')
  and $critic3->rate_songs($panel_name,
			   \&Praati::User::RatingStyles::do_not_rate)
  and $critic3->logout();

$critic4
  and $critic4->login('critic')
  and $critic4->rate_songs($panel_name,
			   \&Praati::User::RatingStyles::do_not_rate)
  and $critic4->logout();


# critic Five disagrees completely with critics Three and Four

my $critic5 = Praati::User->new_user($site,
                                    'critic5@example.org',
                                    'Five',
                                    'pagrlmrczxorjfk');

my %critics_three_and_four_opposite_ratings = (
  map { $_ => (10.0 - $ratings_for_critics_three_and_four{ $_ }) }
    keys %ratings_for_critics_three_and_four
);

$critic5
  and $critic5->login('critic')
  and $critic5->rate_songs($panel_name,
			   \&Praati::User::RatingStyles::do_not_rate)
  and $critic5->logout();

my $critic6 = Praati::User->new_user($site,
                                    'critic6@example.org',
                                    'Six',
                                    'mbrldoqnjjjglws');


# critic Six is lazier than others

$critic6
  and $critic6->login('critic')
  and $critic6->rate_songs($panel_name,
			   \&Praati::User::RatingStyles::do_not_rate)
  and $critic6->logout();


# critic Seven cares enough to not care

my $critic7 = Praati::User->new_user($site,
                                    'critic7@example.org',
                                    'Seven',
                                    'yoephvmreorejgr');

$critic7
  and $critic7->login('critic')
  and $critic7->rate_songs($panel_name,
			   \&Praati::User::RatingStyles::do_not_rate)
  and $critic7->logout();


# critic Eight is normal, but forgot one song

my $critic8 = Praati::User->new_user($site,
                                    'critic8@example.org',
                                    'Eight',
                                    'trergrewtpavxwk');

$critic8
  and $critic8->login('critic')
  and $critic8->rate_songs($panel_name,
			   \&Praati::User::RatingStyles::do_not_rate)
  and $critic8->logout();


# critic Nine is different and comes to update many times

my $critic9 = Praati::User->new_user($site,
                                    'critic9@example.org',
                                    'An Exceptionally Talented Critic',
                                    '23jg403¬£¬§3grbVG');

$critic9
  and $critic9->login('critic')
  and $critic9->rate_songs($panel_name,
			   \&Praati::User::RatingStyles::rate_some)
  and $critic9->logout()
  and $critic9->login('critic')
  and $critic9->rate_songs($panel_name,
			   \&Praati::User::RatingStyles::rate_some)
  and $critic9->logout()
  and $critic9->login('critic')
  and $critic9->rate_songs($panel_name,
			   \&Praati::User::RatingStyles::rate_some)
  and $critic9->logout();


# Admin One creates a listening session

$admin1
  and $admin1->login('admin')
  and $admin1->create_new_listening_session($panel_name,
                                            'Session A',
                                            'asc')
  and $admin1->check_listening_session_rating_counts([
        [ 'Five'                             => 23, ],
        [ 'Four'                             => 23, ],
        [ 'One'                              => 23, ],
        [ 'Seven'                            => 23, ],
        [ 'Three'                            => 23, ],
        [ 'Two'                              => 23, ],
        [ 'Eight'                            => 22, ],
        [ 'An Exceptionally Talented Critic' => 19, ],
        [ 'Six'                              =>  9, ],
      ])
  and $admin1->logout();
