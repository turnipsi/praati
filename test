#!/usr/bin/perl -T
# -*- mode: perl; coding: utf-8; -*-
#
# Copyright (c) 2014, 2017 Juha Erkkil√§ <je@turnipsi.no-ip.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use autodie;
# use diagnostics;
use feature qw(unicode_strings);
use strict;
use utf8;
use warnings FATAL => qw(all);

use CGI;
use HTML::SimpleParse;
use HTML::TableContentParser;
use Test::More tests => 71;
use Test::WWW::Mechanize;

use lib '.';
use Praati::View::L10N;

# XXX this should be initialized differently for every user
# XXX (with different languages preferences)
Praati::View::L10N::init_praati_l10n();

package Praati::User {
  use Class::Struct __PACKAGE__, {
    browser   => 'Test::WWW::Mechanize',
    email     => '$',
    name      => '$',
    password  => '$',
    rating_fn => '$',
    site      => '$',
  };
  use Praati::View::L10N qw(t);

  use Test::Deep;
  use Test::More;

  Praati::View::L10N->import;

  sub check_listening_session_rating_counts {
    my ($self, $rating_counts) = @_;

    my $tcp    = HTML::TableContentParser->new();
    my $tables = $tcp->parse( $self->browser->content() );

    my $test_title = 'Rating counts for all users are correct';
    if ($tables && $tables->[1] && $tables->[1]{rows}) {
      my @rows = map {
                   my $row = $_;
                   $row->{cells}
                     ? [map { $_->{data} // () } @{ $row->{cells} }]
                     : ();
                 } @{ $tables->[1]{rows} };

      cmp_deeply(\@rows, $rating_counts, $test_title);
    } else {
      ok(0, $test_title);
    }
  }

  sub create_new_listening_session {
    my ($self, $panel_name, $ls_name, $ls_type, $song_position) = @_;

    if ($ls_type eq 'desc_asc') {
      confess('Argument error') if ! defined $song_position;
    } elsif ($ls_type eq 'asc') {
      confess('Argument error') if defined $song_position;
    } else {
      confess('Argument error');
    }

    my $test_title
      = sprintf('Create a new listening session "%s" (of type %s)',
                $ls_name,
                $ls_type);

    subtest($test_title, sub {
      plan(tests => 4);

      $self->go_to_new_listening_session_page($panel_name);

      my $formfields = {
        listening_session_name => $ls_name,
        listening_session_type => $ls_type,
      };

      $self->browser->submit_form_ok({ button      => 'new_listening_session',
                                       with_fields => $formfields },
                                     'Sent new listening session request');

      $self->browser->base_like(
        qr{listening_sessions/overview\?listening_session_id=\d+$});
      $self->browser->text_contains(
        t('Listening session overview for "[_1]".', $ls_name));
    });
  }

  sub find_listening_session_create_link {
    my ($html, $panel_name) = @_;

    my $link;

    my ($p, @nodes) = get_parser_and_nodes($html);
    for (my $i = 0; $i < $#nodes; $i++) {
      my $n = $nodes[$i];
      if ($n->{type} eq 'text' && $n->{content} =~ /\Q$panel_name\E/) {
        my $ls_node = $nodes[$i + 5];
        if ($ls_node && $ls_node->{type} eq 'starttag') {
          my %args = $p->parse_args( $ls_node->{content} );
          $link = $args{href};
          last;
        }
      }
    }

    $link;
  }

  sub get_parser_and_nodes {
    my ($html) = @_;
    my $p = HTML::SimpleParse->new($html, fix_case => 0);
    ($p, $p->tree);
  }

  sub go_to_new_listening_session_page {
    my ($self, $panel_name) = @_;
    subtest(qq{Go to new listening session page for "$panel_name"}, sub {
      plan(tests => 4);

      $self->main_page_ok()
        and $self->browser->follow_link_ok({ text => t('Panels') })
        or return;

      my $ls_create_link
        = find_listening_session_create_link($self->browser->content(),
                                             $panel_name);

      return unless $ls_create_link;

      $self->browser->follow_link_ok({ url => $ls_create_link });
      $self->browser->text_contains(
        t('Create a new listening session for panel "[_1]":', $panel_name));
    });
  }

  sub login {
    my ($self, $user_type) = @_;

    my $user_name = $self->name;

    subtest(qq{Login user "$user_name"} => sub {
      plan(tests => 5);

      $self->main_page_ok()
        and $self->browser->follow_link_ok({ text => t('Login') })
        or return;

      my $formfields = {
                         user_email    => $self->email,
                         user_password => $self->password,
                       };

      $self->browser->submit_form_ok({ button      => 'submit_login',
                                       with_fields => $formfields, },
                                     'Send login form')
        and $self->browser->base_like(qr{main$})
        and $self->browser->text_contains(
              t('Logged in as "[_1]" ([_2])', $user_name, $user_type));
    });
  }

  sub logout {
    my ($self) = @_;
    my $user_name = $self->name;

    subtest(qq{Login user "$user_name"} => sub {
      plan(tests => 5);

      $self->main_page_ok()
        and $self->browser->follow_link_ok({ text => t('Logout') })
        and $self->browser->text_contains( t('You are now logged out.') )
        and ($self->browser->get($self->site . '/panels')
               and ok($self->browser->status() == 403,
                      'Returned status code 403 for an unauthorized page'))
        and $self->browser->text_contains( t('Access unauthorized.') );
    });
  }

  sub lookup_rating_ids {
    my ($self) = @_;

    my %rating_ids;

    my $tcp    = HTML::TableContentParser->new();
    my $tables = $tcp->parse( $self->browser->content() );
    return unless ref($tables) eq 'ARRAY';

    foreach my $tablerow (@$tables) {
      next unless ref($tablerow->{rows}) eq 'ARRAY';

      foreach my $row (@{ $tablerow->{rows} }) {
        my $cells = $row->{cells};

        next unless ref($cells) eq 'ARRAY'
                      && ref($cells->[0]) eq 'HASH'
                      && $cells->[0]{data}
                      && ref($cells->[2]) eq 'HASH'
                      && $cells->[2]{data};

        my $songname;
        my (undef, @songname_nodes) = get_parser_and_nodes($cells->[0]{data});
        foreach (@songname_nodes) {
          next unless $_->{type} eq 'text';
          $songname = $_->{content};
        }
        next unless $songname;

        my ($p, @nodes) = get_parser_and_nodes($cells->[2]{data});
        foreach (@nodes) {
          next unless $_->{type} eq 'starttag';
          my %args = $p->parse_args( $_->{content} );
          next unless
            $args{name} && $args{name} =~ /^songs\[(\d+)\].rating_value$/;
          $rating_ids{ $songname } = $1;
          last;
        }
      }
    }

    \%rating_ids;
  }

  sub main_page_ok {
    my ($self) = @_;
    $self->browser->get_ok($self->site);
  }

  sub ask_first_panel_name {
    my ($self) = @_;
    $self->browser->follow_link_ok({ text => t('Panels') })
      and $self->browser->follow_link_ok({ text => t('rate') })
        or return;

    my $regex = t('This panel is "[_1]".', 'PANEL_NAME');
    $regex = qr{\Q$regex\E};
    $regex =~ s/PANEL_NAME/\(\.\*\?\)/;

    $self->browser->content() =~ $regex
      or return;
    $1;
  }

  sub new_user {
    my ($class, $site, $email, $name, $password, $rating_fn) = @_;

    # XXX autolint not working for me (with latin1-characters (or utf8))
    my $self
      = $class->new(browser   => Test::WWW::Mechanize->new(autolint => 0),
                    email     => $email,
                    name      => $name,
                    password  => $password,
                    rating_fn => $rating_fn,
                    site      => $site);

    $self and $self->register();

    $self;
  }

  sub rate_songs {
    my ($self, $panel_name) = @_;

    my $user_name = $self->name;

    my $title = qq{"$user_name" rates songs in "$panel_name"};

    # XXX testcount should not depend on this
    # my $song_ratings_count = 0;

    subtest($title => sub {
      plan(tests => 4);

      $self->main_page_ok()
        and $self->browser->follow_link_ok({ text => t('Panels') })
        and $self->browser->follow_link_ok({ text => $panel_name })
        or return;

      $self->browser->form_number(1);

      my $rating_ids = $self->lookup_rating_ids();

      my @songs_ordered_by_song_id =
        sort { $rating_ids->{$a} <=> $rating_ids->{$b} }
          keys %$rating_ids;

      my $rating_state = {};
      foreach my $songname (@songs_ordered_by_song_id) {
        my $song_id = $rating_ids->{ CGI::escapeHTML($songname) };
        my $rating_value
          = $self->rating_fn->($rating_state, $song_id, $songname);

        $self->browser->select("songs[$song_id].rating_value", $rating_value);
      }

      $self->browser->submit_form_ok({ button => 'send_ratings', },
                                     'Send ratings');
    });
  }

  sub register {
    my ($self) = @_;

    my $user_name = $self->name;

    subtest(qq{Make a new user "$user_name"} => sub {
      plan(tests => 5);

      $self->main_page_ok()
        and $self->browser->text_contains( t('The main page.') )
        and $self->browser->follow_link_ok({ text => t('New user') })
        or return;

      my $formfields = {
                         user_email          => $self->email,
                         user_name           => $self->name,
                         user_password       => $self->password,
                         user_password_again => $self->password,
                       };

      $self->browser->submit_form_ok({ button      => 'submit_new_user',
                                       with_fields => $formfields, },
                                     'Send new user form')
        and $self->browser->base_like(qr{login$});
    });
  }
}

package Praati::User::RatingStyles {
  sub do_not_rate {
    my ($state, $song_id, $songname) = @_;
    '-';
  }

  sub rate_by_random {
    sprintf('%.1f', (int(21 * rand()) / 2));
  }

  sub rate_by_song_id {
    my ($state, $song_id, $songname) = @_;
    sprintf('%.1f', ($song_id % 21) / 2);
  }

  sub rate_by_songname_ascending {
    my ($state, $song_id, $songname) = @_;
    my ($first_letter) = map lc, ($songname =~ /^([\w])/);
    my @alphabets = ('a'..'z');
    for my $i (0 .. $#alphabets) {
      if ($alphabets[$i] eq $first_letter) {
        return _limit_rating(10.0 * ($i / scalar(@alphabets)));
      }
    }

    '0.0';
  }

  sub rate_by_songname_descending {
    sprintf('%.1f', 10.0 - rate_by_songname_ascending(@_));
  }

  sub rate_sine {
    my ($state, $song_id, $songname) = @_;
    _limit_rating(10.0 * ((1.0 + sin($song_id / 7.0)) / 2));
  }

  sub rate_cosine {
    my ($state, $song_id, $songname) = @_;
    _limit_rating(10.0 * ((1.0 + cos($song_id / 7.0)) / 2));
  }

  sub rate_all_but_one {
    my ($state, $song_id, $songname) = @_;
    if (!$state->{done}) {
      $state->{done} = 1;
      return '-';
    }

    rate_by_songname_ascending(@_);
  }

  sub rate_only_one {
    my ($state, $song_id, $songname) = @_;
    if (!$state->{done}) {
      $state->{done} = 1;
      return '7.0';
    }

    '-';
  }

  sub rate_some {
    my ($state, $song_id, $songname) = @_;
    ($song_id % 2 == 1)
      ? rate_by_song_id($state, $song_id, $songname)
      : '-';
  }

  sub rate_good_only_hit_songs {
    my ($state, $song_id, $songname) = @_;
    if (rand() < ((29 * $song_id) % 23) / 100.0) {
      return '10.0';
    }

    '0.0';
  }

  sub rate_mood_matters {
    my ($state, $song_id, $songname) = @_;
    if (!defined($state->{previous})) {
      $state->{previous} = 5.0;
    }

    my $change = 4 * rand() - 2;
    my $new_value = _limit_rating($state->{previous} + $change);

    $state->{previous} = $new_value;

    $new_value;
  }

  # XXX might be interesting, other distributions as well:
  # sub rate_normal_distribution

  sub rate_random_ascending {
    my $value = rate_by_songname_ascending(@_);
    $value += (rand() < 0.5 ? -1 : 1) * 5.0 * rand() * rand();
    _limit_rating($value);
  }

  sub _limit_rating {
    my $value = _round_to_nearest_half($_[0]);
    ($value <  0.0) ?  0.0 :
    ($value > 10.0) ? 10.0 : $value;
  }

  sub _round_to_nearest_half {
    sprintf('%.1f', sprintf('%.0f', 2.0 * $_[0]) / 2.0);
  }
}


sub login_rate_logout {
  my ($critic, $panel_name) = @_;

  $critic
    and $critic->login('critic')
    and $critic->rate_songs($panel_name)
    and $critic->logout();
}


#
# main
#

die 'Usage: test site' unless $ARGV[0];

my $site = $ARGV[0];


# The admin user must be created first.

my $admin
  = Praati::User->new_user($site,
                           'admin@example.org',
                           'Admin',
                           'pogjwviwjvalaook',
                           \&Praati::User::RatingStyles::do_not_rate);

my $panel_name;
do {
  $admin
    and $admin->login('admin')
    and $panel_name = $admin->ask_first_panel_name();
} or die 'Could not get panel name';

$admin->logout();

my $critic_fn;

# XXX should the critics just be in some hash table and that could be iterated?

$critic_fn = \&Praati::User::RatingStyles::do_not_rate;
my $lazy_critic = Praati::User->new_user($site,
                                         'lazy.critic@example.org',
                                         'Lazy Critic',
                                         'jtreofnvwlcjiwe',
                                         $critic_fn);
login_rate_logout($lazy_critic, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_by_random;
my $random_critic_1 = Praati::User->new_user($site,
                                             'random.critic.1@example.org',
                                             'RC1',
                                             'ofwqhowqjbnmqwo',
                                             $critic_fn);
login_rate_logout($random_critic_1, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_by_random;
my $random_critic_2 = Praati::User->new_user($site,
                                             'random.critic.2@example.org',
                                             'RC2',
                                             'hjhwtrpjbtep345',
                                             $critic_fn);
login_rate_logout($random_critic_2, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_by_random;
my $random_critic_3 = Praati::User->new_user($site,
                                             'random.critic.3@example.org',
                                             'RC3',
                                             'yBeBaYow5jjwR12',
                                             $critic_fn);
login_rate_logout($random_critic_3, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_by_song_id;
my $song_id_critic = Praati::User->new_user($site,
                                            'song.id.critic@example.org',
                                            'Song Id Critic',
                                            'aorlnwwjpwiaqnl',
                                            $critic_fn);
login_rate_logout($song_id_critic, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_by_songname_ascending;
my $ascending_critic = Praati::User->new_user($site,
                                              'ascending.critic@example.org',
                                              'Ascending Critic',
                                              'rtrejptspaeiewm',
                                              $critic_fn);
login_rate_logout($ascending_critic, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_by_songname_descending;
my $descending_critic = Praati::User->new_user($site,
                                               'descending.critic@example.org',
                                               'Descending Critic',
                                               'pagrlmrczxorjfk',
                                               $critic_fn);
login_rate_logout($descending_critic, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_sine;
my $sine_critic = Praati::User->new_user($site,
                                         'sine.critic6@example.org',
                                         'Sine Critic',
                                         'mbrldoqnjjjglws',
                                         $critic_fn);
login_rate_logout($sine_critic, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_cosine;
my $cosine_critic = Praati::User->new_user($site,
                                           'cosine.critic@example.org',
                                           'Cosine Critic',
                                           'yoephvmreorejgr',
                                           $critic_fn);
login_rate_logout($cosine_critic, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_all_but_one;
my $except_one_critic = Praati::User->new_user($site,
                                               'except.one.critic@example.org',
                                               'Except One Critic',
                                               'trergrewtpavxwk',
                                               $critic_fn);
login_rate_logout($except_one_critic, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_only_one;
my $only_one_critic = Praati::User->new_user($site,
                                             'only.one.critic@example.org',
                                             'Only One Critic',
                                             '23jg403¬£A3grbVG',
                                             $critic_fn);
login_rate_logout($only_one_critic, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_some;
my $rate_some_critic = Praati::User->new_user($site,
                                              'rate.some.critic@example.org',
                                              'Rate Some Critic',
                                              'ytrfFwretfwEerv',
                                              $critic_fn);
login_rate_logout($rate_some_critic, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_good_only_hit_songs;
my $hits_only_critic = Praati::User->new_user($site,
                                              'hits.only@example.org',
                                              'Hits Only',
                                              'jGr5Yalg4t32gFb',
                                              $critic_fn);
login_rate_logout($hits_only_critic, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_mood_matters;
my $mood_matters_critic_1 = Praati::User->new_user($site,
                                                   'mood.matters.1@example.org',
                                                   'MM1',
                                                   'gre4545ysfdpgeg',
                                                   $critic_fn);
login_rate_logout($mood_matters_critic_1, $panel_name);

$critic_fn = \&Praati::User::RatingStyles::rate_mood_matters;
my $mood_matters_critic_2 = Praati::User->new_user($site,
                                                   'mood.matters.2@example.org',
                                                   'MM2',
                                                   '9653FBwKg2TKGDj',
                                                   $critic_fn);
login_rate_logout($mood_matters_critic_2, $panel_name);


$critic_fn = \&Praati::User::RatingStyles::rate_random_ascending;
my $rand_asc_critic = Praati::User->new_user($site,
                                            'random.asc.critic@example.org',
                                            'Random Ascending',
                                            '54gdpgretp6GewF',
                                            $critic_fn);
login_rate_logout($rand_asc_critic, $panel_name);


# Random Admin creates a listening session

# XXX how to calculate this
my $songcount = 207;

$admin
  and $admin->login('admin')
  and $admin->create_new_listening_session($panel_name, 'Session A', 'asc')
  and $admin->check_listening_session_rating_counts([
        [ 'Ascending Critic'  => $songcount     ],
        [ 'Cosine Critic'     => $songcount     ],
        [ 'Descending Critic' => $songcount     ],
        [ 'Except One Critic' => $songcount - 1 ],
        [ 'Hits Only'         => $songcount     ],
        [ 'MM1'               => $songcount     ],
        [ 'MM2'               => $songcount     ],
        [ 'Only One Critic'   => 1              ],
        [ 'Random Ascending'  => $songcount     ],
        [ 'RC1'               => $songcount     ],
        [ 'RC2'               => $songcount     ],
        [ 'RC3'               => $songcount     ],
        [ 'Rate Some Critic'  => $songcount / 2 ],
        [ 'Sine Critic'       => $songcount     ],
        [ 'Song Id Critic'    => $songcount     ],
      ])
  and $admin->logout();
